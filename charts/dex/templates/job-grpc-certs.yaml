{{- if .Values.certs.grpc.create }}
{{ $fullname := include "fullname" . }}
{{ $caName := .Values.certs.grpc.ca.secretName }}
{{ $caNamespace := default .Release.Namespace .Values.certs.grpc.ca.namespace }}
{{ $openSslConfigName := printf "%s-openssl-config" $fullname }}
{{ $local := dict "i" 0 }}
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded
  name: {{ $fullname }}-grpc-certs
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
    component: "job"
spec:
  activeDeadlineSeconds: {{ .Values.certs.grpc.activeDeadlineSeconds }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        release: "{{ .Release.Name }}"
        component: "job"
    spec:
      serviceAccountName: {{ template "serviceAccountName" . }}
      restartPolicy: OnFailure
      containers:
      - name: main
        image: "{{ .Values.certs.image | default "gcr.io/jenkinsxio/openssl" }}:{{ .Values.certs.imageTag | default .Values.image.tag }}"
        imagePullPolicy: {{ .Values.certs.imagePullPolicy }}
        command:
        - /bin/bash
        - -exc
        - |
          export CONFIG=/etc/dex/tls/grpc/openssl.conf;
          cat << EOF > san.cnf
          {{- $_ := set $local "i" 1 }}
          {{- range .Values.certs.grpc.altNames }}
          DNS.{{ $local.i }}:{{ . }}
          {{- $_ := set $local "i" ( add1 $local.i ) }}
          {{- end }}
          {{- $_ := set $local "i" 1 }}
          {{- range .Values.certs.grpc.altIPs }}
          IP.{{ $local.i }}:{{ . }}
          {{- $_ := set $local "i" ( add1 $local.i ) }}
          {{- end }}
          EOF
          export SAN=$(cat san.cnf |  paste -sd "," -)

          # Creating basic files/directories
          mkdir -p {certs,crl,newcerts}
          touch index.txt
          touch index.txt.attr
          echo 1000 > serial
          # CA private key (unencrypted)
          openssl genrsa -out ca.key 4096;
          # Certificate Authority (self-signed certificate)
          openssl req -config $CONFIG -new -x509 -days 3650 -sha256 -key ca.key -extensions v3_ca -out ca.crt -subj "/CN=dex-grpc-ca";

          # Store the CA certificate and key in a secret
          notfound=false
          caNamespace={{ $caNamespace }}
          kubectl get secret {{ $caName }} --namespace $caNamespace || notfound=true
          if $notfound; then
            kubectl create secret tls {{ $caName }} --namespace $caNamespace --cert=ca.crt --key=ca.key;
          fi
          releaseNamespace={{ .Release.Namespace }}
          if [ "$caNamespace" != "$releaseNamespace" ]; then 
            found=true
            kubectl get secret {{ $caName }} --namespace $releaseNamespace || found=false
            if $found; then
                kubectl delete secret {{ $caName }} --namespace $releaseNamespace 
            fi
            kubectl get secret {{ $caName }} --namespace $caNamespace --export -o yaml | kubectl apply --namespace $releaseNamespace -f -
          fi
        volumeMounts:
        - name: openssl-config
          mountPath: /etc/dex/tls/grpc
      volumes:
      - name: openssl-config
        configMap:
          name: {{ $openSslConfigName }}
{{- end }}

